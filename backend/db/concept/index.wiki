= 数据库 =

== 关系理论 ==
relational database theory

edgar codd & christopher date

== 关系 ==
关系是n个集合的笛卡儿积的一个子集

关系的实际意义是什么？一行代表了一个实体的属性？

== 关系数据库与联接 ==
关系数据库用二维表表示数据关系->在操作时使用联接指明这种关系

联接是关系数据库模型的主要特点，也是它区别于其它类型数据库管理系统的一个标志。

== 视图 ==
视图(View) 是在关系数据库中，将一组查询指令构成的结果集，组合成可查询的数据表的一种数据库对象。

=== 作用 ===
* 可以将实体数据表隐藏起来，让外部程序的设计师无法得知实际的数据结构，降低数据库被攻击的风险。
* 在多数的情况下，查看表是只读的，外部程序无法直接通过查看表修改数据(具更新能力的查看表除外)。
* 简化查询，数据库管理员可以将高度复杂的查询，包装在查看表中，外部程序只需要直接访问该查看表即可取出需要的数据。
* 在查看表中先行运行运算。
* 查看表可视为数据表，具有 JOIN 的能力。
* 数据库中只需要存储定义，无须存储数据。

=== 性能 ===
视图在每次使用前，都要执行创建视图的查询操作，复杂的视图可能导致性能降低，需要注意。

== 索引 ==
[[dbindex|索引]]

== 存储过程 ==
存储过程（Stored Procedure）是一组为了完成特定功能的SQL 语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给出参数来执行它

== 优点 ==
* 预存程序可封装，并隐藏复杂的商业逻辑。
* 预存程序可以回传值，并可以接受参数。
* 预存程序无法使用 SELECT 指令来运行，因为它是子程序，与查看表，数据表或用户定义函数不同。
* 预存程序可以用在数据检验，强制实行商业逻辑等。
* 使用存储过程比单独的SQL快

== 数据库设计 ==
=== 步骤 ===
# requirements analysis
# ERD
# relational model (EER diagram)
# normalization (http://en.wikipedia.org/wiki/Database_normalization)
=== tips ===
# 所有InnoDB数据表都创建一个和业务无关的自增数字型作为主键，对保证性能很有帮助；
# 杜绝使用text/blob，确实需要使用的，尽可能拆分出去成一个独立的表；
# 时间戳建议使用 TIMESTAMP 类型存储；
# IPV4 地址建议用 INT UNSIGNED 类型存储；
# 性别等非是即非的逻辑，建议采用 TINYINT 存储，而不是 CHAR(1)；
# 存储较长文本内容时，建议采用JSON/BSON格式存储；

== 优化 ==
=== 优化数据类型 ===
# 使用能正确存储和表示数据的最小类型
# 数据类型尽量简单
# 避免NULL
