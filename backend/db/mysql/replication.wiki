= 主从复制 =
[[http://www.mysqlops.com/2011/06/16/mysql-master-replication-slave.html]]

== 实现原理 ==
整个复制过程实际上就是Slave 从 Master 端获取 该日志然后再在自己身上完全顺序的执行日志中所记录的各种操作

slave 和 master 上的IO线程同步bin-log，slave上的sql线程执行bin-log中的sql语句，使两数据库同步。

== 复制级别 ==
=== row level ===
Binary Log 中会记录成每一行数据被修改的形式,然后在 Slave 端 再对相同的数据进行修改。

记录的内容明确无误，缺点是日志量大。

=== statement level ===
每一条会修改数据的 Query 都会记录到 Master 的 Binary Log 中。Slave 在复制的时候 SQL 线程会解析成和原来 Master 端执行过的相同的 Query 来再次执行。

记录的内容少效率高，但可能会出现同步出错的问题。

== 常用架构 ==
=== master-slave ===
常规架构，一个master复制到一个或多个slave

通常用于读压力比较大的情况，可以把读操作放到slave上，分散压力

程序需要读写分离

==== 配置步骤 ====
主服务器172.3.11.114 

从服务器172.3.11.116 
 
安装配置mysql，可以正常启动 

Master配置文件主要参数如下： 

{{{
server-id = 1 
log-bin = master-cutoe-binlog 
binlog_format = mixed 
sync_binlog = 1 
innodb_flush_log_at_trx_commit = 2 
}}}

Slave配置文件主要参数如下： 
{{{
server-id = 2 
replicate-do-db = replication 
replicate-ignore-db = mysql 
replicate-ignore-db = information_schema 
}}} 

如果配置都对了的话，先起Master，再起Slave 

在Master和Slave中创建好需要复制的库和表，比如 
`create database replication;`
`create table user(id int primary key auto_increment, name varchar(20), age smallint); `

(让复制自动在Slave中创建和Master一样的表在这里我没有尝试，有空可以试试) 

还要在Master中创建一个Slave用来访问Master的用户 
`CREATE USER ‘repl’@'%’ IDENTIFIED BY ‘repl’; `
`GRANT REPLICATION SLAVE ON *.* TO ‘repl’@'%’;` –为什么不能指定该用户只对单独的库具有复制权限，目前不清楚原因 
然后在Master中`mysql> show master status; `
Slave，然后通过`change master to master_host=’127.0.0.1′, master_port=3307, master_user=’repl’, master_password=’repl’, master_log_file=’master-cutoe-binlog.000001′, master_log_pos=600, master_connect_retry=10; `
`slave start; `
`show slave status \G;`

清除配置`reset master/slave;`

=== master-master ===
[[http://alexzeng.wordpress.com/2012/09/13/how-to-setup-mysql-replication-in-simple-steps/]]

[[http://www.mysqlops.com/2011/10/18/heartbeat-mysql.html|HeartBeat搭建MySQL数据库双主热备高可用环境]]

[[http://www.mysqlops.com/2011/06/07/mysql-replication-data-consistency.html|MySQL双主复制的主备数据一致性知多少]]

[[http://junsansi.itpub.net/post/29894/525126|MySQL双主复制环境中BINLOG日志的解析]]，根据此文章，双主中的slave在一个主挂掉的情况下，可以直接change master到另一个主

两个mysql互为主从，可以方便的切换

和一些HA软件结合后，可以在master异常的情况下自动切换，实现高可用。

一般情况下只对一个库做写操作

=== Master - Slaves - Slaves ===
级联复制架构

当

== 状态 ==
[[http://dev.mysql.com/doc/refman/5.0/en/replication-administration-status.html]]

=== SHOW SLAVE STATUS ===
Seconds_Behind_Master 从库SQL线程与IO线程所处理的最近的日志事件的时间戳差

== 配置 ==
=== 主从增加延迟 ===
主动为replication增加延迟，当主库执行了错误操作的情况下，可以利用从库恢复。

使用pt-slave-delay [[http://www.percona.com/doc/percona-toolkit/2.1/pt-slave-delay.html]]

[[http://www.mysqlperformanceblog.com/2012/09/11/how-to-lag-a-slave-behind-to-avoid-a-disaster/ | How to lag a slave behind to avoid a disaster]]

