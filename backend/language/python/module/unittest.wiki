=unittest=
[[http://pyunit.sourceforge.net/pyunit_cn.html|Python单元测试框架]]

用import语句引入unittest模块。 

让所有执行测试的类都继承于TestCase类，可以将TestCase看成是对特定类进行测试的方法的集合。 

在setUp()方法中进行测试前的初始化工作，并在tearDown()方法中执行测试后的清除工作，setUp()和tearDown()都是TestCase类中定义的方法。 

在testSize()中调用assertEqual()方法，对Widget类中getSize()方法的返回值和预期值进行比较，确保两者是相等的，assertEqual()也是TestCase类中定义的方法。 

提供名为suite()的全局方法，PyUnit在执行测试的过程调用suit()方法来确定有多少个测试用例需要被执行，可以将TestSuite看成是包含所有测试用例的一个容器。 
 
将测试代码放置在单独的模块中（如“xxxtests.py”）会有一些优势： 
* 测试模块可以从命令行单独执行 
* 测试代码可以方便地从发布代码中分离 
* 少了在缺乏充足理由的情况下为适应被测试代码而更改测试代码的诱惑 
* 相对于被测试代码，测试代码不应该被频繁的修改 
* 被测试代码可以更方法的进行重构 
* 既然C语言代码的测试应该置于单独的模块，那何不保持这个一致性呢？ 
* 如果测试策略改变，也无需修改被测试源代码

被测代码
{{{
class Widget:
    def __init__(self, size = (40, 40)):
        self._size = size
    def getSize(self):
        return self._size
    def resize(self, width, height):
        if width < 0  or height < 0:
            raise ValueError, "illegal size"
        self._size = (width, height)
    def dispose(self):
        pass
}}}

测试代码
{{{
from widget import Widget
import unittest
# 执行测试的类
class WidgetTestCase(unittest.TestCase):
    def setUp(self):
        self.widget = Widget()
    def tearDown(self):
        self.widget.dispose()
        self.widget = None
    def testSize(self):
        self.assertEqual(self.widget.getSize(), (40, 40))
    def testResize(self):
        self.widget.resize(100, 100)
        self.assertEqual(self.widget.getSize(), (100, 100))
# 测试
if __name__ == "__main__":
    # 构造测试集
    #suite = unittest.TestSuite()
    #suite.addTest(WidgetTestCase("testSize"))
    #suite.addTest(WidgetTestCase("testResize"))
    #
    ## 执行测试
    #runner = unittest.TextTestRunner()
    #runner.run(suite)
    unittest.main()
}}}
