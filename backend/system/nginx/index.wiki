%title Nginx
= 简介 =
官方网站[[http://www.nginx.org/cn/]]

是一款轻量级的Web 服务器／反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页伺服器中表现较好。

== 开源扩展 ==
http://openresty.org/cn/index.html

= 安装 =
[[http://www.ixdba.net/archives/2012/06/174.htm]]

[[http://www.tornadoweb.cn/documentation#_14|配置tornado负载均衡]]

运行提示“libpcre.so.1出错”

可以`ln -s /lib64/libpcre.so.0.0.1 /lib64/libpcre.so.1`

nginx+php

服务器前端使用nginx（相当于一个反向代理）

服务器后端使用fastcgi解析php

修改默认配置为`fastcgi_param  script_filename  $document_root$fastcgi_script_name;`

= 配置 =
[[conf|配置]]

=== 设置可访问路径 ===
http://www.oschina.net/question/878142_106780
http://www.server110.com/nginx/201308/477.html

=== 来源ip ===
`$remote_addr`代表来源ip

限制可以访问的ip
{{{
allow 172.0.0.1;
allow 192.168.1.0/24;
deny all;
}}}

=== if指令 ===
{{{
a.变量名，错误的值包括：空字符串""或者任何以0开始的字符串
b.变量比较可以使用"="(表示等于)和"!="(表示不等于)
c.正则表达式模式匹配可以使用"~*"和"~"符号
d."~"符号表示区分大小写字母的匹配
e."~*"符号表示不区分大小写字母的匹配
f."!~"和"!~*"符号的作用刚好和"~"、"~*"相反，表示不匹配
g."-f"和"!-f"用来判断文件是否存在
h."-d"和"!-d"用来判断目录是否存在
i."-e"和"!-e"用来判断文件或目录是否存在
j."-x"和"!-x"用来判断文件是否为可执行
k.部分正则表达式可以在()内，用$1~$9来访问
}}}

=== 防刷 ===
[[http://www.cnblogs.com/geekma/archive/2012/09/06/2673222.html|nginx防ddos攻击的简单配置]]

[[http://netsecurity.51cto.com/art/201306/400210.htm|使用nginx防御cc攻击]]

[[http://nginx.org/cn/docs/http/ngx_http_limit_req_module.html|ngx_http_limit_req_module]]

基本php请求限制
{{{
http
{
    #...
    geo $limited{
        default 1;
        #白名单
        172.0.0.0/8 0;
        10.96.60.0/24  0;
        172.4.3.3 0;
    }
    map $limited $limit {
        1 $binary_remote_addr;
        0 "";
    }
    limit_req_zone $limit zone=one:10m rate=5r/s;
    server {
        #...
        location ~ .+\.php($|/) {
            limit_req zone=one burst=5 nodelay;
        }
    }
}
}}}

需要注意的点：
限制频率应该是多少？应该限制哪些location？是否要放开静态文件的限制？

=== 日志 ===
http://nginx.org/en/docs/http/ngx_http_log_module.html
http://blog.linezing.com/2011/11/%E4%BD%BF%E7%94%A8nginx%E8%AE%B0%E6%97%A5%E5%BF%97

==== log 滚动 ====
[[http://www.nginx.cn/255.html]]

==== log中记录post内容 ====
http://www.cnblogs.com/meteorx/p/3188647.html
自定义log_format，包括$request_body，这样在access log中就会保存post请求的内容。
根据http://wiki.nginx.org/NginxHttpCoreModule#.24request_body描述，只有在proxy_pass或fastcgi_pass的locations段中request_body才生效。上述博文中使用ngx_lua全局生效，待研究。

==== log只记录某些php请求 ====
http://segmentfault.com/q/1010000000114749

==== log不记录静态文件请求 ====
http://www.9enjoy.com/post/431/

== 操作 ==
=== init script ===
https://gist.github.com/mickhan/5829436/raw/6c2d7f9eec4fd3f8c642e289e671ebe0ba445369/gistfile1.sh

=== 无缝重启 ===
kill -HUP pid

e.g. kill -hup `cat /usr/local/nginx/logs/nginx.pid`

可以采用 -HUP或-USR1信号，比较 https://github.com/Qzi/learning/tree/master/nginx

[[http://weizhifeng.net/nginx-signal-processing-and-upgrade.html|Nginx信号处理与平滑升级]]

== 监控 ==
=== 查看状态（连接数） === 

编译时加入`--with-http_stub_status_module`状态检查模块 

在配置里面增加 
{{{
location /status { 

        stub_status on; 

        access_log /var/log/nginx/status.log; 

        auth_basic "NginxStatus";} 
}}} 

Active connections：当前 Nginx 正处理的活动连接数。 

server accepts handled requests :总共处理了15个连接 , 成功创建 15 次握手,总共处理了76个请求。 

Reading：nginx 读取到客户端的 Header 信息数。 

Writing:nginx 返回给客户端的 Header 信息数。 

Waiting :开启 keep-alive 的情况下， Nginx 已经处理完正在等候下一个请求指令的停留连接。 

== 常见问题 ==
1. 样式可以获取但无法加载，network中看到type是application/octet-stream
需要在配置文件中include mime.types
